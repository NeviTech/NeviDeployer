package xxnvt.model;

import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jun 16 15:41:23 EEST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DbObjectsVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    private    String sqlUdt;
    
    public enum AttributesEnum {
        Owner {
            public Object get(DbObjectsVORowImpl obj) {
                return obj.getOwner();
            }

            public void put(DbObjectsVORowImpl obj, Object value) {
                obj.setOwner((String)value);
            }
        }
        ,
        ObjectName {
            public Object get(DbObjectsVORowImpl obj) {
                return obj.getObjectName();
            }

            public void put(DbObjectsVORowImpl obj, Object value) {
                obj.setObjectName((String)value);
            }
        }
        ,
        SubobjectName {
            public Object get(DbObjectsVORowImpl obj) {
                return obj.getSubobjectName();
            }

            public void put(DbObjectsVORowImpl obj, Object value) {
                obj.setSubobjectName((String)value);
            }
        }
        ,
        ObjectId {
            public Object get(DbObjectsVORowImpl obj) {
                return obj.getObjectId();
            }

            public void put(DbObjectsVORowImpl obj, Object value) {
                obj.setObjectId((Number)value);
            }
        }
        ,
        DataObjectId {
            public Object get(DbObjectsVORowImpl obj) {
                return obj.getDataObjectId();
            }

            public void put(DbObjectsVORowImpl obj, Object value) {
                obj.setDataObjectId((Number)value);
            }
        }
        ,
        ObjectType {
            public Object get(DbObjectsVORowImpl obj) {
                return obj.getObjectType();
            }

            public void put(DbObjectsVORowImpl obj, Object value) {
                obj.setObjectType((String)value);
            }
        }
        ,
        Created {
            public Object get(DbObjectsVORowImpl obj) {
                return obj.getCreated();
            }

            public void put(DbObjectsVORowImpl obj, Object value) {
                obj.setCreated((Date)value);
            }
        }
        ,
        LastDdlTime {
            public Object get(DbObjectsVORowImpl obj) {
                return obj.getLastDdlTime();
            }

            public void put(DbObjectsVORowImpl obj, Object value) {
                obj.setLastDdlTime((Date)value);
            }
        }
        ,
        Timestamp {
            public Object get(DbObjectsVORowImpl obj) {
                return obj.getTimestamp();
            }

            public void put(DbObjectsVORowImpl obj, Object value) {
                obj.setTimestamp((String)value);
            }
        }
        ,
        Status {
            public Object get(DbObjectsVORowImpl obj) {
                return obj.getStatus();
            }

            public void put(DbObjectsVORowImpl obj, Object value) {
                obj.setStatus((String)value);
            }
        }
        ,
        Temporary {
            public Object get(DbObjectsVORowImpl obj) {
                return obj.getTemporary();
            }

            public void put(DbObjectsVORowImpl obj, Object value) {
                obj.setTemporary((String)value);
            }
        }
        ,
        Generated {
            public Object get(DbObjectsVORowImpl obj) {
                return obj.getGenerated();
            }

            public void put(DbObjectsVORowImpl obj, Object value) {
                obj.setGenerated((String)value);
            }
        }
        ,
        Secondary {
            public Object get(DbObjectsVORowImpl obj) {
                return obj.getSecondary();
            }

            public void put(DbObjectsVORowImpl obj, Object value) {
                obj.setSecondary((String)value);
            }
        }
        ,
        Namespace {
            public Object get(DbObjectsVORowImpl obj) {
                return obj.getNamespace();
            }

            public void put(DbObjectsVORowImpl obj, Object value) {
                obj.setNamespace((Number)value);
            }
        }
        ,
        EditionName {
            public Object get(DbObjectsVORowImpl obj) {
                return obj.getEditionName();
            }

            public void put(DbObjectsVORowImpl obj, Object value) {
                obj.setEditionName((String)value);
            }
        }
        ,
        ObjectSource {
            public Object get(DbObjectsVORowImpl obj) {
                return obj.getObjectSource();
            }

            public void put(DbObjectsVORowImpl obj, Object value) {
                obj.setObjectSource((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(DbObjectsVORowImpl object);

        public abstract void put(DbObjectsVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int OWNER = AttributesEnum.Owner.index();
    public static final int OBJECTNAME = AttributesEnum.ObjectName.index();
    public static final int SUBOBJECTNAME = AttributesEnum.SubobjectName.index();
    public static final int OBJECTID = AttributesEnum.ObjectId.index();
    public static final int DATAOBJECTID = AttributesEnum.DataObjectId.index();
    public static final int OBJECTTYPE = AttributesEnum.ObjectType.index();
    public static final int CREATED = AttributesEnum.Created.index();
    public static final int LASTDDLTIME = AttributesEnum.LastDdlTime.index();
    public static final int TIMESTAMP = AttributesEnum.Timestamp.index();
    public static final int STATUS = AttributesEnum.Status.index();
    public static final int TEMPORARY = AttributesEnum.Temporary.index();
    public static final int GENERATED = AttributesEnum.Generated.index();
    public static final int SECONDARY = AttributesEnum.Secondary.index();
    public static final int NAMESPACE = AttributesEnum.Namespace.index();
    public static final int EDITIONNAME = AttributesEnum.EditionName.index();
    public static final int OBJECTSOURCE = AttributesEnum.ObjectSource.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DbObjectsVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Owner.
     * @return the Owner
     */
    public String getOwner() {
        return (String) getAttributeInternal(OWNER);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Owner.
     * @param value value to set the  Owner
     */
    public void setOwner(String value) {
        setAttributeInternal(OWNER, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ObjectName.
     * @return the ObjectName
     */
    public String getObjectName() {
        return (String) getAttributeInternal(OBJECTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ObjectName.
     * @param value value to set the  ObjectName
     */
    public void setObjectName(String value) {
        setAttributeInternal(OBJECTNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SubobjectName.
     * @return the SubobjectName
     */
    public String getSubobjectName() {
        return (String) getAttributeInternal(SUBOBJECTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SubobjectName.
     * @param value value to set the  SubobjectName
     */
    public void setSubobjectName(String value) {
        setAttributeInternal(SUBOBJECTNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ObjectId.
     * @return the ObjectId
     */
    public Number getObjectId() {
        return (Number) getAttributeInternal(OBJECTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ObjectId.
     * @param value value to set the  ObjectId
     */
    public void setObjectId(Number value) {
        setAttributeInternal(OBJECTID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DataObjectId.
     * @return the DataObjectId
     */
    public Number getDataObjectId() {
        return (Number) getAttributeInternal(DATAOBJECTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DataObjectId.
     * @param value value to set the  DataObjectId
     */
    public void setDataObjectId(Number value) {
        setAttributeInternal(DATAOBJECTID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ObjectType.
     * @return the ObjectType
     */
    public String getObjectType() {
        return (String) getAttributeInternal(OBJECTTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ObjectType.
     * @param value value to set the  ObjectType
     */
    public void setObjectType(String value) {
        setAttributeInternal(OBJECTTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Created.
     * @return the Created
     */
    public Date getCreated() {
        return (Date) getAttributeInternal(CREATED);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Created.
     * @param value value to set the  Created
     */
    public void setCreated(Date value) {
        setAttributeInternal(CREATED, value);
    }

    /**
     * Gets the attribute value for the calculated attribute LastDdlTime.
     * @return the LastDdlTime
     */
    public Date getLastDdlTime() {
        return (Date) getAttributeInternal(LASTDDLTIME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LastDdlTime.
     * @param value value to set the  LastDdlTime
     */
    public void setLastDdlTime(Date value) {
        setAttributeInternal(LASTDDLTIME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Timestamp.
     * @return the Timestamp
     */
    public String getTimestamp() {
        return (String) getAttributeInternal(TIMESTAMP);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Timestamp.
     * @param value value to set the  Timestamp
     */
    public void setTimestamp(String value) {
        setAttributeInternal(TIMESTAMP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Status.
     * @return the Status
     */
    public String getStatus() {
        return (String) getAttributeInternal(STATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Status.
     * @param value value to set the  Status
     */
    public void setStatus(String value) {
        setAttributeInternal(STATUS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Temporary.
     * @return the Temporary
     */
    public String getTemporary() {
        return (String) getAttributeInternal(TEMPORARY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Temporary.
     * @param value value to set the  Temporary
     */
    public void setTemporary(String value) {
        setAttributeInternal(TEMPORARY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Generated.
     * @return the Generated
     */
    public String getGenerated() {
        return (String) getAttributeInternal(GENERATED);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Generated.
     * @param value value to set the  Generated
     */
    public void setGenerated(String value) {
        setAttributeInternal(GENERATED, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Secondary.
     * @return the Secondary
     */
    public String getSecondary() {
        return (String) getAttributeInternal(SECONDARY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Secondary.
     * @param value value to set the  Secondary
     */
    public void setSecondary(String value) {
        setAttributeInternal(SECONDARY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Namespace.
     * @return the Namespace
     */
    public Number getNamespace() {
        return (Number) getAttributeInternal(NAMESPACE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Namespace.
     * @param value value to set the  Namespace
     */
    public void setNamespace(Number value) {
        setAttributeInternal(NAMESPACE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EditionName.
     * @return the EditionName
     */
    public String getEditionName() {
        return (String) getAttributeInternal(EDITIONNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EditionName.
     * @param value value to set the  EditionName
     */
    public void setEditionName(String value) {
        setAttributeInternal(EDITIONNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ObjectSource.
     * @return the ObjectSource
     */
    public String getObjectSource() {
        return (String) getAttributeInternal(OBJECTSOURCE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ObjectSource.
     * @param value value to set the  ObjectSource
     */
    public void setObjectSource(String value) {
        setAttributeInternal(OBJECTSOURCE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
        
}
